basePath: /v1
definitions:
  controller.TokenRefreshRequest:
    properties:
      refreshToken:
        type: string
    type: object
  controller.TokenRequest:
    properties:
      authCode:
        type: string
    type: object
  controller.detailResponseRoom:
    properties:
      code:
        type: string
      createdAt:
        type: string
      hint:
        type: string
      id:
        type: integer
      isMaster:
        type: boolean
      members:
        items:
          $ref: '#/definitions/controller.responseMember'
        type: array
      name:
        type: string
      period:
        type: integer
      theme:
        type: string
      turnAccountId:
        type: integer
      turnAccountName:
        type: string
      updatedAt:
        type: string
    type: object
  controller.filePostResponse:
    properties:
      audioDownloadURL:
        type: string
      audioURL:
        type: string
      photoDownloadURL:
        type: string
      photoURL:
        type: string
    type: object
  controller.listResponseRoom:
    properties:
      rooms:
        items:
          $ref: '#/definitions/controller.responseRoom'
        type: array
    type: object
  controller.mockMemberRequest:
    properties:
      email:
        type: string
      name:
        type: string
    type: object
  controller.mockMemberResponse:
    properties:
      accessToken:
        type: string
      authCode:
        type: string
      refreshToken:
        type: string
    type: object
  controller.patchRequestRoom:
    properties:
      code:
        type: string
      hint:
        type: string
      members:
        items:
          type: integer
        type: array
      period:
        type: integer
    type: object
  controller.patchResponseRoom:
    properties:
      roomId:
        type: integer
    type: object
  controller.postRequestRoom:
    properties:
      code:
        default: 제민욱
        type: string
      hint:
        default: 레오의 본명은?
        type: string
      name:
        default: 고영희방
        type: string
      period:
        default: 5
        type: integer
      theme:
        default: "1"
        type: string
    type: object
  controller.postResponseRoom:
    properties:
      roomId:
        type: integer
    type: object
  controller.responseMember:
    properties:
      id:
        type: integer
      profileUrl:
        type: string
    type: object
  controller.responseRoom:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      members:
        items:
          $ref: '#/definitions/controller.responseMember'
        type: array
      name:
        type: string
      orders:
        items:
          type: integer
        type: array
      updatedAt:
        type: string
    type: object
  controller.tokenResponse:
    properties:
      accesstoken:
        type: string
      refreshToken:
        type: string
    type: object
  controller.verifyRequestRoom:
    properties:
      code:
        type: string
    type: object
host: exchange-diary-b4mzhzbzcq-du.a.run.app
info:
  contact:
    email: minkj1992@gmail.com
    name: API Support
    url: https://minkj1992.github.io
  description: This is a voda api server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Voice Of Diary API (voda)
  version: "1.0"
paths:
  /authentication/mock:
    post:
      consumes:
      - application/json
      description: |-
        클라 테스트용. 주어진 email이 db에 없으면 회원가입 프로세스 동시에 진행
        AccessToken을 사용해서 헤더에 {"Authorization": AccessToken} 넣어주면 된다.
      parameters:
      - description: 모킹할 유저정보
        in: body
        name: room
        required: true
        schema:
          $ref: '#/definitions/controller.mockMemberRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.mockMemberResponse'
        "400":
          description: ""
        "500":
          description: ""
      summary: (debug) mock login / register
      tags:
      - auth
  /login/{auth_type}:
    get:
      consumes:
      - application/json
      description: |-
        회원가입 하지 않았을 경우, email로 회원가입 자동 진행
        이후 jwt 토큰 발급에 필요한 authCode를 전달한다.
      parameters:
      - description: kakao | google | apple
        in: path
        name: auth_type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "301":
          description: ""
        "400":
          description: ""
        "500":
          description: ""
      summary: login
      tags:
      - auth
  /rooms:
    get:
      consumes:
      - application/json
      description: 참여중인 교환일기방 리스트
      parameters:
      - description: page size
        format: uint
        in: query
        name: limit
        type: integer
      - description: page offset
        format: uint
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.listResponseRoom'
        "400":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: List rooms
      tags:
      - rooms
    post:
      consumes:
      - application/json
      description: 교환일기방 생성
      parameters:
      - description: 교환일기방 생성요청 body
        in: body
        name: room
        required: true
        schema:
          $ref: '#/definitions/controller.postRequestRoom'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.postResponseRoom'
        "400":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: create a room
      tags:
      - rooms
  /rooms/{id}:
    delete:
      consumes:
      - application/json
      description: 교환일기방 삭제
      parameters:
      - description: 교환일기방 ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "400":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: (debug only) delete a room
      tags:
      - rooms
    get:
      consumes:
      - application/json
      description: 교환일기방 상세
      parameters:
      - description: 교환일기방 ID
        format: uint
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.detailResponseRoom'
        "400":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: get a room
      tags:
      - rooms
    patch:
      consumes:
      - application/json
      description: |-
        교환일기방 업데이트 (master only)
        1. 작성주기 변경 (period)
        2. 코드/힌트 변경 (code, hint)
        3. 작성순서 변경(orders)
      parameters:
      - description: 교환일기방 ID
        in: path
        name: id
        required: true
        type: integer
      - description: 교환일기방 수정 요청 body
        in: body
        name: room
        required: true
        schema:
          $ref: '#/definitions/controller.patchRequestRoom'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.patchResponseRoom'
        "400":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: update a room
      tags:
      - rooms
  /rooms/{id}/join:
    post:
      consumes:
      - application/json
      description: 교환일기방 참여코드 체크 후, 교환일기방 멤버로 추가
      parameters:
      - description: 교환일기방 ID
        in: path
        name: id
        required: true
        type: integer
      - description: 교환일기방 참여 요청 body
        in: body
        name: room
        required: true
        schema:
          $ref: '#/definitions/controller.verifyRequestRoom'
      produces:
      - application/json
      responses:
        "201":
          description: ""
        "400":
          description: ""
        "401":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: join a room
      tags:
      - rooms
  /rooms/{id}/leave:
    delete:
      consumes:
      - application/json
      description: |-
        교환일기방 나가기
        1. 교환일기방 마스터일 경우
        2. 교환일기방 멤버일 경우
      parameters:
      - description: 교환일기방 ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "400":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: leave a room
      tags:
      - rooms
  /rooms/{room_id}/files:
    post:
      consumes:
      - multipart/form-data
      description: 파일 업로드
      parameters:
      - description: Room ID
        in: path
        name: room_id
        required: true
        type: integer
      - default: "1.5"
        in: formData
        name: audioPitch
        type: string
      - default: LastDayOnEarth
        in: formData
        name: audioTitle
        type: string
      - default: ad5bb198-942f-4ddf-a248-3aaa4bba3b9b
        in: formData
        name: audioUUID
        type: string
      - default: e4947e0c-490b-4588-a14d-e74dd3b8371f
        in: formData
        name: photoUUID
        type: string
      - description: photo
        in: formData
        name: photo
        type: file
      - description: audio
        in: formData
        name: audio
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.filePostResponse'
        "400":
          description: ""
        "500":
          description: ""
      summary: upload static files
      tags:
      - files
  /token:
    post:
      consumes:
      - application/json
      description: AuthCode를 전달하여, access & refresh 토큰을 발급 받는다.
      parameters:
      - description: 발급받은 AuthCode
        in: body
        name: room
        required: true
        schema:
          $ref: '#/definitions/controller.TokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.tokenResponse'
        "400":
          description: ""
        "500":
          description: ""
      summary: JWT 토큰 발급
      tags:
      - auth
  /token/refresh:
    get:
      consumes:
      - application/json
      description: refresh token을 전달하여, accessToken을 재발급받는다.
      parameters:
      - description: refresh 토큰
        in: body
        name: room
        required: true
        schema:
          $ref: '#/definitions/controller.TokenRefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.tokenResponse'
        "400":
          description: ""
        "500":
          description: ""
      summary: AccessToken 재발급
      tags:
      - auth
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
