' https://gist.github.com/QuantumGhost/0955a45383a0b6c0bc24f9654b3cb561
@startuml
!define Table(name,desc) class name as "desc" << (T) >>
!define pk(x) <color:red><b>x</b></color>
!define fk(x) <color:blue><b>x</b></color>
' 초록색: 유니크키
!define unique(x) <color:green>x</color>
' 밑줄: not null
!define not_null(x) <u>x</u>

hide methods
hide stereotypes

note as N1
    들어가기 앞서 표기법을 정리합니다.
    1. <color:red><b>PK</b></color>
    2. <color:blue><b>FK</b></color>
    3. <color:green>Unique Key</color>
    4. <u>not null</u>
end note

' entities
Table(accounts, "accounts\n계정") {
    pk(id) INTEGER
    not_null(unique(email)) VARCHAR[255]
    not_null(name) VARCHAR[]    계정 닉네임
    not_null(profile_url) VARCHAR[255]    프로필 이미지 url
    not_null(alarm_flag) TINYINT[1]        사용자 알람 플래그 on/off
    ...jwt, oauth 필드들
    not_null(created_at) DATETIME
    not_null(updated_at) DATETIME
}

Table(rooms, "rooms\n다이어리방") {
    pk(id) INTEGER
    fk(master_id) INTEGER   다이어리방 마스터 I[방장]
    not_null(name) VARCHAR[]    방 이름
    not_null(period) UNSIGNED TINYINT   작성 기한[1~7d]
    not_null(code) VARCHAR[]    참여코드
    not_null(hint) VARCHAR[]    참여질문
    not_null(theme) VARCHAR[]   다이어리 배경 테마
    not_null(orders) JSON   다이어리 작성순서 []account_id
    not_null(turn_account_id) INTEGER   현재 작성 순서인 멤버 account_id
    not_null(created_at) DATETIME
    not_null(updated_at) DATETIME
}

Table(diaries, "diaries\n다이어리") {
    pk(id) INTEGER
    fk(created_by) INTEGER  작성 계정ID
    fk(room_id) INTEGER     다이어리방 ID
    not_null(place) VARCHAR[]    다이어리 장소
    not_null(title) VARCHAR[]    다이어리 제목
    not_null(content) VARCHAR[]  다이어리 글 내용
    not_null(theme) VARCHAR[]    다이어리 템플릿명
    fk(audio_UUID) UUID 오디오 UUID
    not_null(created_at) DATETIME
    not_null(updated_at) DATETIME
}

Table(room_members, "room_members\n다이어리방 참여 멤버") {
    pk(id) INTEGER
    fk(account_id) INTEGER  참여한 멤버계정ID
    fk(room_id) INTEGER     다이어리방 ID
    not_null(created_at) DATETIME   다이어리방 참여시점, 마스터 선출용
}

Table(audio, "audio\n다이어리 음성녹음") {
    pk(uuid)    UUID  음성녹음 UUID, static 서버에도 동일 UUID로 저장
    not_null(name)  VARCHAR[]      오디오 파일명
    pitch   VARCHAR[]    오디오 피치값 (aos / ios가 서로 다르기 때문에 string)
}

Table(photos, "photos\n다이어리 사진") {
    pk(uuid)    UUID   스토리지 서버에 저장된 photo uuid
    fk(diary_id) INTEGER    다이어리 ID
    ext VARCHAR[]    이미지 ext
}

Table(auth, "auth\nOauth관련") {
}


Table(alarm, "alarm\n알림") {
    pk(id) INTEGER
}

Table(notices, "notices\n공지사항") {
    pk(id) INTEGER
    not_null(title) VARCHAR[]    공지사항 제목
    not_null(content) VARCHAR[]   공지사항 본문
    not_null(created_at) DATETIME
    not_null(updated_at) DATETIME
}


' one-to-one relationship
diaries "1" -- "1" audio

' one to may relationship
accounts "1" --> "0..N" rooms : "A user(master) may have\n many DiaryRooms"
accounts "1" --> "0..N" diaries : "A user may have\n many Diary stories"
accounts "1" --> "0..N" room_members : "A user may can be\n many diary_room's member"
rooms "1" --> "0..N" diaries : "A room may can have\n many diaries"
rooms "1" --> "0..N" room_members : "A room may can have\n many accounts(members)"
diaries "1" --> "0..N" photos : "A diary may can have\n many photos."
@enduml