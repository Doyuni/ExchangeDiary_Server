@startuml

' client
Actor user
Participant client #Gold

' api
Participant "server" as api #LightSalmon
database "db" as db #LightSalmon

' title
title <font size=30>/v1/rooms</font>

' prerequisites
user -> client  : 로그인
client -> api : jwt
return ok {"Authorization": "56E7E522C3..."}

note right of user
현재 과정 모두 진행된 상태에서 아래 시퀀스들이 진행됩니다.
endnote
|||
== POST /v1/rooms   교환일기방 생성 ==
client -> api++: **POST /v1/rooms**
note right of client #Lavender
{
    "name": 방이름,
    "code": 질문답변,
    "hint": 참여질문,
    "period": 작성기한 (int),
    "theme": <str> // aos의 경우 hex color 값, ios의 경우 원하는 식별자 string 형식으로
}
endnote

api -> api: json validation
api -> api: orders 필드 추가\
\n{\n\t...\n\t"orders": [현재_로그인_account_id],\n}
api -> db++: insert a room
return room
return **200 Ok**
note right of client #Lavender
{
    "roomId": 1
}
endnote

||20||

== GET /v1/rooms/<:room_id>   교환일기방 상세화면 접근==
' TODO: 서버에서 접근 권한 확인 401(1. 로그인 안된경우 / 2. 멤버가 아닌경우)

user -> client++: (1) 교환일기방 리스트 중 하나 클릭\
\n(2) 외부에서 공유 링크 클릭
client -> api++: 교환일기방 상세정보 요청\
\n**GET /v1/rooms/<:room_id>**
api -> db++: Get a Room\
\n**WHERE id = <room_id>**
return room
api -> db++: **교환일기 작성 순서에 따라 계정정보 획득**\
\n(room.orders순서로 account in-query)\
\nSELECT id, profile_url FROM accounts WHERE in <room.orders>
return []member
api -> api: 현재 계정이 마스터, 멤버인지 확인
alt#Gold #Pink Failure
    api -> client: **401 Unauthorized**
    client -> user: 교환일기방 참여코드 입력 페이지 렌더링
end
return 교환일기방 상세 정보\
\n**200 OK**
note right of client #Lavender
{   // 방에 참여한 멤버 ( 작성순서대로 전달됨 )
    "members": [
        {
            "accountId": "<int>",
            "profileUrl": "<url>" // https://voda-api.com/profiles/leoo.png
        },
        {
            "accountId": "<int>",
            "profileUrl": "<url>"
        }
    ],
    "turnAccountId": "<int>", // 현재 턴 accountID (이걸 기준으로 orders에서 파랑색 동그라미)
    "turnAccountName": "<str>", // 현재 턴 accountName i.g "고영희", ("고영희님이 이야기를 쓰고있어요!"일때 사용)
    "name": "<str>", // 다이어리 이름 i.g. 고영희 미만 다꾸러
    "theme": "<str>", // 다이어리 배경 테마명
    "period": <int>, // 작성 기한 (방장설정화면 > 작성기한 재설정용)
    "isMaster": "<bool>" // 다이어리 마스터 여부 (방장설정화면 접근 권한 체크용)    
}
endnote

client -> api++: 교환일기방에 작성된 일기들 요청\
\n**GET /v1/rooms/<:room_id>/diaries?offset=<:offset>&limit=10**
note right
max limit size = 1000
endnote
api -> api: 현재 계정이 마스터, 멤버인지 확인
api -> db++: Get Diaries(Order by Created_by)\
\nSELECT * FROM diaries WHERE room_id=<room_id> ORDER BY id desc LIMIT <:limit> OFFSET <:offset>
return []diary
return **200 OK**
note right of client #Lavender
{
    "data": {
        // 생성 순서 내림차순
        "diaries": [
            {
            "place": "<str>", // 장소 i.g. "방구석에서"
            "accountName": "<str>", // 생성한 accountName
            "profileUrl": "<url>", // 사용자 프로필 이미지 url
            "createdAt": "<datetime>" //생성 일자
            },
            {},
            {}
        ],
        "totalDiaryCount": <int> // 총 다이어리 숫자 (페이지 요청용)
    }
}
endnote
return 교환일기방 상세화면 렌더링


||20||

== GET /v1/rooms  가입된 다이어리 (Home 화면용)==
client -> api++: **GET /v1/rooms**
api -> db++: 자신이 멤버로 참여하는 다이어리방들 얻기\
\n**SELETE room_id FROM room_members WHERE account_id=<:current_account_id>**
return []room_id
api -> db++: 멤버로 참여하는 다이어리방이거나, 마스터로 참여하는 다이어리방들 Query(order by created_at desc)\
\n given: (room_ids []room_id, account_id: int)\
\nSELECT * FROM diaries WHERE room_id in <room_ids> OR master_id=<account_id>  ORDER BY id desc
return []room
return **200 OK**
note right of client #Lavender
{
    // 최신 생성순으로 정렬되어 return
    "rooms": [
        {
            "id": "<int>", //다이어리룸 id
            "name": "<str>", // 다이어리룸 이름
            "createdAt": <datetime>, // 최근 다이어리 알려주기용
            "members": [
            {
                "accountId": "<int>",
                "profileUrl": "<url>",
            },
            {}
            ]
        },
        {},
        {},
        ...
    ]
}
endnote
' alt#Gold #Pink (TODO) 알림 영역으로 대체되어야함
'     client -> api++: **GET /v1/rooms/urgent**
' note right of client
' 	1. 본인이 참여하고 있는 방이어야한다.
' 	2. 해당하는 방들 중, 본인이 작성할 턴이어야 한다.
' 	3. 그 중 가장 일정이 촉박한(urgent) 방 정보를 클라에 전달한다.
    
' endnote
'     api -> client: **200 OK**
' note right of client #Lavender
' {
'     "id": "<int>", // 다이어리 방 id
'     "name": "<str>", // 다이어리 방 이름 i.g. 고영희 미만 다꾸러
'     "theme": "<str>", // 다이어리 배경 테마명
'     "dueAt": <datetime> // 참여하고 있는 방들 중, 본인의 턴이면서 가장 가까운 일정
' }
' endnote   
' end

client -> user: 다이어리방 home 화면 렌더링

||20||


== DELETE /v1/rooms/<:room_id> 교환일기방 나가기 ==
' TODO

||20||
@enduml